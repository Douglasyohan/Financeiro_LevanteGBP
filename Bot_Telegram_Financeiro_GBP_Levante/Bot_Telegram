from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import sqlite3
from datetime import datetime

# Configura√ß√µes
TOKEN = "7781334700:AAE7buocWIs0MJVoSchWq1NHe8Vg_XF_xeM"
DB_NAME = 'gastos.db'

# Estados da conversa
AGUARDANDO_VALOR, AGUARDANDO_OBSERVACAO = range(2)

# Banco de Dados
def criar_tabela():
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS transacoes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            tipo TEXT,
            valor REAL,
            observacao TEXT,
            data TEXT
        )
    ''')
    conn.commit()
    conn.close()

criar_tabela()

# ---- Handlers ----
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    teclado = [["Registrar Entrada", "Registrar Sa√≠da"], ["Ver Resumo"]]
    reply_markup = ReplyKeyboardMarkup(teclado, one_time_keyboard=True)
    await update.message.reply_text(
        "üìä *Contador de Gastos* üìä\nEscolha uma op√ß√£o:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    return ConversationHandler.END  # Encerra qualquer conversa anterior

async def registrar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tipo = "entrada" if "Entrada" in update.message.text else "saida"
    context.user_data["tipo"] = tipo
    await update.message.reply_text(f"üíµ Digite o valor para a {tipo} (ex: 150.50):")
    return AGUARDANDO_VALOR  # Pr√≥ximo estado: aguardando valor

async def salvar_valor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        valor = float(update.message.text)
        context.user_data["valor"] = valor
        await update.message.reply_text("üìù Digite uma observa√ß√£o (ex: Compra na lojinha):")
        return AGUARDANDO_OBSERVACAO  # Pr√≥ximo estado: aguardando observa√ß√£o
    except:
        await update.message.reply_text("‚ùå Valor inv√°lido. Use n√∫meros (ex: 50 ou 100.50).")
        return AGUARDANDO_VALOR  # Permanece no mesmo estado

async def salvar_observacao(update: Update, context: ContextTypes.DEFAULT_TYPE):
    observacao = update.message.text
    tipo = context.user_data["tipo"]
    valor = context.user_data["valor"]
    data = datetime.now().strftime("%d/%m/%Y %H:%M")

    # Salva no banco de dados
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO transacoes (tipo, valor, observacao, data)
        VALUES (?, ?, ?, ?)
    ''', (tipo, valor, observacao, data))
    conn.commit()
    conn.close()

    await update.message.reply_text(
        f"‚úÖ Registrado com sucesso!\n"
        f"*Tipo*: {tipo}\n"
        f"*Valor*: R$ {valor:.2f}\n"
        f"*Observa√ß√£o*: {observacao}",
        parse_mode="Markdown"
    )
    await start(update, context)  # Volta ao menu
    return ConversationHandler.END  # Encerra o fluxo

async def resumo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT SUM(valor) FROM transacoes WHERE tipo = "entrada"')
    total_entrada = cursor.fetchone()[0] or 0
    cursor.execute('SELECT SUM(valor) FROM transacoes WHERE tipo = "saida"')
    total_saida = cursor.fetchone()[0] or 0
    conn.close()

    await update.message.reply_text(
        f"üìà *Resumo*\n\n"
        f"Entradas: R$ {total_entrada:.2f}\n"
        f"Sa√≠das: R$ {total_saida:.2f}\n"
        f"Saldo: R$ {total_entrada - total_saida:.2f}",
        parse_mode="Markdown"
    )

async def cancelar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå Opera√ß√£o cancelada.")
    await start(update, context)
    return ConversationHandler.END

# ---- Configura√ß√£o do Bot ----
if __name__ == "__main__":
    app = Application.builder().token(TOKEN).build()

    # Conversation Handler para registrar transa√ß√µes
    conv_handler = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^Registrar (Entrada|Sa√≠da)$"), registrar)
        ],
        states={
            AGUARDANDO_VALOR: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, salvar_valor)
            ],
            AGUARDANDO_OBSERVACAO: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, salvar_observacao)
            ],
        },
        fallbacks=[CommandHandler("cancelar", cancelar)],
    )

    # Comandos e handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    app.add_handler(MessageHandler(filters.Regex("^Ver Resumo$"), resumo))

    # Inicia o Bot
    app.run_polling()
